TODO
1 要上线的时候把iconfont的网络资源换成本地资源
2 晚会还剩60S的时候做一个特效



danmu.vue

<template>
  <div class="perform">
    <ali-head :pageTitle="translate(18, lang)" :showDrawer="true" :showPerformStatistics="userInfo.role===1"></ali-head>
    <img  class="danmu-out-btn" src="../../../static/img/danmu.png"  :style="{right: danmuOut}" @click="outBarrage">
    <div class="danmu" :style="{left: danmuIn}">
      <input class="danmu-text" type="text" placeholder="say something" v-model="danmu">
      <span class="danmu-btn" @click="sendBarrage">{{translate(88, lang)}}</span>
      <span class="danmu-in-btn danmu-btn" @click="inBarrage">{{translate(90, lang)}}</span>
    </div>
    <div class="perform-data pt44 pb1" v-if="performList.length > 0">
      <div class="fix-img">
        <img src="../../../static/img/bg.png" alt="">
      </div>
      <div class="perform-item" v-for="(item, index) in performList" :key="index">
        <span class="trigle"></span>
        <span class="num">{{item.id}}</span>
        <p class="department">{{translate(96, lang)}}&nbsp;&nbsp;{{item.department}}</p>
        <p class="perform-name ellipsis">{{translate(97, lang)}}&nbsp;&nbsp;{{item.performName}}</p>
        <p class="join-people ellipsis">{{translate(98, lang)}}&nbsp;&nbsp;{{item.joinPeople}}</p>
        <span class="submit-mark" @click="commentByUser(item)">{{translate(79, lang)}}</span>
        <span class="comment-score" v-if="gradeDetailList[index]">{{translate(77, lang)}}{{gradeDetailList[index]}}</span>
      </div>
    </div>
    <danmu
      :isShow= "barrageIsShow"
      :barrageList = "barrageList"
      :loop = "barrageLoop"
      @barrageHide="barrageHide">
    </danmu>
    <div class="comment-box" v-if="commentBoxShow">
      <div class="mask" @click="boxHide"></div>
      <div class="box-content">
        <div class="top">{{translate(76, lang)}}{{performId}}{{translate(80, lang)}}</div>
        <star-rating :score= "score" :maxScore= "maxScore" @rate="rate"></star-rating>
        <div class="btn" @click="commitPerformComment">{{translate(79, lang)}}</div>
      </div>
    </div>
    <ali-loading v-if="loadingStatus" :position="'fixed'"></ali-loading>
  </div>
</template>
<script>
import AliHead from '../../components/aliHead'
import Danmu from '../../components/danmu'
import {translate, quickSort} from '../../config/util.js'
import urls from '../../config/urls.js'
import AliLoading from '../../components/aliLoading'
import StarRating from '../../components/starRating'
import {mapActions} from 'vuex'
export default {
  data () {
    return {
      performList: [],
      gradeDetailList: [],
      score: 0,
      maxScore: 5,
      danmu: '',
      barrageIsShow: false,
      barrageList: [],
      barrageLoop: false,
      danmuInputShow: false,
      timer: '',
      lastId: '',
      canDanmu: true,
      performId: '',
      commentBoxShow: false
    }
  },
  components: {
    AliHead,
    AliLoading,
    StarRating,
    Danmu
  },
  created () {
    if (!this.userInfo) {
      this.$router.replace({path: '/'})
    } else {
      this.changeLoadingStatus(true)
      this.getPerformList()
    }
  },
  destroyed () {
    clearInterval(this.timer)
  },
  computed: {
    lang () {
      return this.$store.state.lang
    },
    userInfo () {
      return this.$store.state.userInfo
    },
    loadingStatus () {
      return this.$store.state.loadingStatus
    },
    baseUrl () {
      return this.$store.state.baseUrl
    },
    danmuIn () {
      if (this.danmuInputShow) {
        return '0'
      } else {
        return '-100%'
      }
    },
    danmuOut () {
      if (this.danmuInputShow) {
        return '-100%'
      } else {
        return '0'
      }
    }
  },
  methods: {
    ...mapActions([
      'updateAppPosition',
      'changeLoadingStatus'
    ]),
    // 弹出
    outBarrage () {
      this.danmuInputShow = true
      this.barrageIsShow = true
      this.timer = setInterval(() => {
        this.getBarrage()
      }, 1000 * 3)
      this.getBarrage()
    },
    // 收回
    inBarrage () {
      this.danmuInputShow = false
      this.barrageIsShow = false
      clearInterval(this.timer)
    },
    sendBarrage () {
      if (this.canDanmu) {
        this.$axios.post(urls.addDanmu, {msg: this.danmu}).then((res) => {
          this.canDanmu = false
          this.danmu = ''
          this.lastId = res.data
          setTimeout(() => {
            this.canDanmu = true
          }, 1000 * 10)
        })
      } else {
        this.$toast({msg: translate(100, this.lang)})
      }
    },
    getBarrage () {
      this.$axios.get(urls.getDanmuList).then((res) => {
        let newInfo = res.data
        if (newInfo.length > 0) {
          newInfo.map((item) => {
            if (item.status === 0) {
              this.barrageList.unshift(item)
            }
          })
        }
      })
    },
    barrageHide () {
      if (this.lastId) {
        this.$axios.post(urls.changeDanmuStatus, {id: this.lastId}).then(() => {})
      }
    },
    rate (val) {
      this.score = val
    },
    commentByUser (item) {
      this.performId = item.id
      this.commentBoxShow = true
      this.updateAppPosition('fixed')
    },
    boxHide () {
      this.commentBoxShow = false
      this.updateAppPosition('absolute')
    },
    translate (key, lang) {
      return translate(key, lang)
    },
    commitPerformComment () {
      if (this.score > 0) {
        this.changeLoadingStatus(true)
        this.$axios.post(urls.commitPerformComment, {id: this.performId, score: this.score}).then((res) => {
          this.$toast({msg: translate(102, this.lang)})
          this.score = 0
          this.boxHide()
          this.getPerformList()
        })
      } else {
        this.$toast({msg: translate(101, this.lang)})
      }
    },
    getPerformList () {
      this.gradeDetailList = []
      this.$axios.get(urls.getPerformList).then((res) => {
        this.performList = quickSort(res.data, true, 'id')
        // 构造自己的gradeDetailList
        this.performList.map((item) => {
          item.gradeDetailList.map((scoreItem) => {
            if (scoreItem.username === this.userInfo.username) {
              this.gradeDetailList.push(scoreItem.score)
            }
          })
        })
        this.changeLoadingStatus(false)
      })
    }
  }
}
</script>
<style lang="scss">
@import '../../style/px2rem.scss';
.danmu-out-btn {
  position: fixed;
  top: 9rem;
  width: 9rem;
  z-index: 8;
  right: px2rem(20);
  transition: right 1s;
}
.danmu {
  position: fixed;
  top: 4.4rem;
  z-index: 6;
  display: flex;
  width: 100%;
  background: #fff;
  padding: px2rem(20) 0;
  margin: 0 auto;
  justify-content: space-around;
  transition: left 1s;
  &-text {
    flex: 1;
    height: px2rem(88);
    font-size: px2rem(32);
    padding-left: px2rem(20);
    margin-left: px2rem(10);
    border-radius: px2rem(8);
    border: 1px solid #666;
    box-sizing: border-box;
  }
  &-btn {
    width: px2rem(100);
    height: px2rem(88);
    line-height: px2rem(88);
    margin: 0 px2rem(10);
    text-align: center;
    border-radius: px2rem(8);
    border: 1px solid #999;
    box-sizing: border-box;
  }
}
.perform-data {
  position: relative;
  .perform-item {
    position: relative;
    width: px2rem(700);
    margin: px2rem(20) auto 0;
    padding-bottom: px2rem(20);
    background: #fff;
     .trigle {
      position: absolute;
      z-index: 2;
      right: 0;
      top: 0;
      width: 0;
      height: 0;
      border-top: px2rem(150) solid #c59cf8;
      border-left: px2rem(150) solid transparent;
    }
    .num {
      position: absolute;
      z-index: 3;
      right: px2rem(30);
      top: px2rem(30);
      font-size: px2rem(28);
      color: #fff;
    }
    p {
      width: 80%;
      line-height: px2rem(60);
      padding-left: px2rem(40);
      color: #9f56f0;
      font-size: px2rem(30);
      span {
        margin: 0 px2rem(20) 0 px2rem(40);
      }
    }
    .mark{
      position: absolute;
      top: px2rem(200);
      .text {
        line-height: px2rem(60);
        font-size: px2rem(30);
        vertical-align: bottom;
        margin: 0 px2rem(20) 0 px2rem(40);
      }
    }
    .submit-mark {
      display: inline-block;
      width: px2rem(120);
      height: px2rem(56);
      margin-left: px2rem(40);
      line-height: px2rem(56);
      text-align: center;
      background: #ffd552;
      color: #fd8504;
      border-radius: px2rem(8);
      font-size: px2rem(26);
    }
    .comment-score {
      display: inline-block;
      margin-left: px2rem(40);
      font-size: px2rem(26);
      color: #9f56f0;
    }
  }
}

@keyframes box2Show {
  0% {
    top: 5%;
    opacity: 0.6;
  }
  100% {
    top: 10%;
    opacity: 1;
  }
}
</style>
